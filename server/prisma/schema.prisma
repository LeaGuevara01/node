generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Maquinaria {
  id           Int          @id @default(autoincrement())
  nombre       String
  modelo       String
  anio         Int?
  categoria    String?
  descripcion  String?
  estado       String?
  numero_serie String?
  proveedor    String?
  ubicacion    String?
  reparaciones Reparacion[]
  compraDetalles CompraDetalle[]
}

model Repuesto {
  id           Int                  @id @default(autoincrement())
  nombre       String
  stock        Int
  proveedorId  Int?
  categoria    String?
  codigo       String?
  descripcion  String?
  precio       Int?
  proveedor    String?
  ubicacion    String?
  reparaciones ReparacionRepuesto[]
  proveedorRel Proveedor?           @relation(fields: [proveedorId], references: [id])
  compraDetalles CompraDetalle[]
}

model Proveedor {
  id        Int        @id @default(autoincrement())
  nombre    String
  contacto  String?
  cuit      String?
  direccion String?
  ubicacion String?
  email     String?
  productos String[]
  telefono  String?
  web       String?
  notas     String?
  repuestos Repuesto[]
  compras   Compra[]
}

model Reparacion {
  id           Int                  @id @default(autoincrement())
  fecha        DateTime
  maquinariaId Int
  descripcion  String?
  userId       Int?
  maquinaria   Maquinaria           @relation(fields: [maquinariaId], references: [id], onDelete: Cascade)
  usuario      User?                @relation(fields: [userId], references: [id])
  repuestos    ReparacionRepuesto[]
  compraDetalles CompraDetalle[]
}

model ReparacionRepuesto {
  id           Int        @id @default(autoincrement())
  reparacionId Int
  repuestoId   Int
  cantidad     Int
  reparacion   Reparacion @relation(fields: [reparacionId], references: [id], onDelete: Cascade)
  repuesto     Repuesto   @relation(fields: [repuestoId], references: [id])
}

model User {
  id           Int          @id @default(autoincrement())
  username     String       @unique
  password     String
  role         String
  reparaciones Reparacion[]
}

/// Compras a proveedores
model Compra {
  id         Int             @id @default(autoincrement())
  fecha      DateTime        @default(now())
  proveedorId Int
  estado     String          @default("PENDIENTE") // PENDIENTE | RECIBIDA | CANCELADA
  total      Int?
  notas      String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  proveedor  Proveedor       @relation(fields: [proveedorId], references: [id])
  detalles   CompraDetalle[]
}

model CompraDetalle {
  id            Int         @id @default(autoincrement())
  compraId      Int
  repuestoId    Int
  cantidad      Int
  precioUnitario Int?
  maquinariaId  Int?
  reparacionId  Int?

  compra        Compra      @relation(fields: [compraId], references: [id], onDelete: Cascade)
  repuesto      Repuesto    @relation(fields: [repuestoId], references: [id])
  maquinaria    Maquinaria? @relation(fields: [maquinariaId], references: [id])
  reparacion    Reparacion? @relation(fields: [reparacionId], references: [id])
}

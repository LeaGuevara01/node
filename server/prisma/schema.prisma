model Componente {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String?
  estado      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Maquinaria {
  id             Int             @id @default(autoincrement())
  nombre         String
  modelo         String
  anio           Int?
  categoria      String?
  descripcion    String?
  estado         String?
  numero_serie   String?
  proveedor      String?
  ubicacion      String?
  compraDetalles CompraDetalle[]
  reparaciones   Reparacion[]
}

model Repuesto {
  id             Int                  @id @default(autoincrement())
  nombre         String
  stock          Int
  proveedorId    Int?
  categoria      String?
  codigo         String?
  descripcion    String?
  precio         Int?
  proveedor      String?
  ubicacion      String?
  compraDetalles CompraDetalle[]
  reparaciones   ReparacionRepuesto[]
  proveedorRel   Proveedor?           @relation(fields: [proveedorId], references: [id])
  preciosProveedores PrecioRepuestoProveedor[]
}

model Proveedor {
  id        Int        @id @default(autoincrement())
  nombre    String
  cuit      String?
  direccion String?
  email     String?
  productos String[]
  telefono  String?
  web       String?
  contacto  String?
  notas     String?
  ubicacion String?
  compras   Compra[]
  repuestos Repuesto[]
  preciosRepuestos PrecioRepuestoProveedor[]
}

model Reparacion {
  id             Int                  @id @default(autoincrement())
  fecha          DateTime
  maquinariaId   Int
  descripcion    String?
  userId         Int?
  compraDetalles CompraDetalle[]
  maquinaria     Maquinaria           @relation(fields: [maquinariaId], references: [id], onDelete: Cascade)
  usuario        User?                @relation(fields: [userId], references: [id])
  repuestos      ReparacionRepuesto[]
}

model ReparacionRepuesto {
  id           Int        @id @default(autoincrement())
  reparacionId Int
  repuestoId   Int
  cantidad     Int
  reparacion   Reparacion @relation(fields: [reparacionId], references: [id], onDelete: Cascade)
  repuesto     Repuesto   @relation(fields: [repuestoId], references: [id])
}

model User {
  id           Int          @id @default(autoincrement())
  username     String       @unique
  password     String
  role         String
  reparaciones Reparacion[]
}

/// Compras a proveedores
model Compra {
  id          Int             @id @default(autoincrement())
  fecha       DateTime        @default(now())
  proveedorId Int
  estado      String          @default("PENDIENTE")
  total       Int?
  notas       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  proveedor   Proveedor       @relation(fields: [proveedorId], references: [id])
  detalles    CompraDetalle[]
}


/// Precios de repuestos seg√∫n proveedor y fecha
model PrecioRepuestoProveedor {
  id           Int        @id @default(autoincrement())
  repuestoId   Int
  proveedorId  Int
  precio       Int
  fecha        DateTime   @default(now())
  repuesto     Repuesto   @relation(fields: [repuestoId], references: [id])
  proveedor    Proveedor  @relation(fields: [proveedorId], references: [id])
}

model CompraDetalle {
  id             Int         @id @default(autoincrement())
  compraId       Int
  repuestoId     Int
  cantidad       Int
  precioUnitario Int?
  maquinariaId   Int?
  reparacionId   Int?
  compra         Compra      @relation(fields: [compraId], references: [id], onDelete: Cascade)
  maquinaria     Maquinaria? @relation(fields: [maquinariaId], references: [id])
  reparacion     Reparacion? @relation(fields: [reparacionId], references: [id])
  repuesto       Repuesto    @relation(fields: [repuestoId], references: [id])
}

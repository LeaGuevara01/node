#!/usr/bin/env node

/**
 * Script de verificaci√≥n: Eliminaci√≥n de emojis en tags de listado
 *
 * Este script verifica que todos los emojis hayan sido reemplazados
 * por iconos apropiados de Lucide React en elementos de UI.
 */

const fs = require('fs');
const path = require('path');

const CLIENT_SRC = path.join(__dirname, '..', 'src');

// Lista de emojis que deber√≠an ser reemplazados
const EMOJIS_A_VERIFICAR = [
  'üìÖ',
  'üìç',
  'üè∑Ô∏è',
  'üí∞',
  'üîß',
  'üì¶',
  'üìä',
  'üöú',
  '‚öôÔ∏è',
  'üåæ',
  '‚ö°',
  'üéØ',
  'üîç',
  'üí°',
  '‚ú®',
  'üé®',
  'üé™',
  'üé≠',
  'üé¨',
  'üì∏',
  'üìã',
  'üìå',
  'üñêÔ∏è',
  'üîÑ',
  'üñ±Ô∏è',
];

// Archivos modificados en esta sesi√≥n
const ARCHIVOS_MODIFICADOS = [
  'pages/MaquinariasPageRefactored.jsx',
  'components/BusquedaRapida.jsx',
  'components/Sidebar.jsx',
  'pages/StatsCardDemo.jsx',
  'pages/DashboardModern.jsx',
  'pages/Dashboard.jsx',
  'pages/MaquinariaFormModular.jsx',
  'components/SwipeDemo.jsx',
];

// Mapeo de emojis a iconos implementados
const MAPEO_REALIZADO = {
  'üìÖ': 'Calendar',
  'üìç': 'MapPin',
  'üè∑Ô∏è': 'Tag',
  'üåæ': 'Wheat',
  'üìä': 'BarChart3',
  'üîß': 'Wrench',
  'üì¶': 'Package',
  'üí°': 'Lightbulb',
  'üéØ': 'Target',
  'üé®': 'Palette',
  'üöú': 'Tractor',
  'üñêÔ∏è': 'Hand',
  'üîÑ': 'RotateCcw',
  'üñ±Ô∏è': 'Monitor',
};

function buscarEmojisEnArchivo(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const emojisEncontrados = [];

    EMOJIS_A_VERIFICAR.forEach((emoji) => {
      if (content.includes(emoji)) {
        // Buscar l√≠neas que contengan el emoji
        const lines = content.split('\n');
        lines.forEach((line, index) => {
          if (line.includes(emoji)) {
            // Excluir comentarios de logs de consola
            if (!line.includes('console.log') && !line.includes('console.error')) {
              emojisEncontrados.push({
                emoji,
                linea: index + 1,
                contenido: line.trim(),
              });
            }
          }
        });
      }
    });

    return emojisEncontrados;
  } catch (error) {
    console.error(`‚ùå Error leyendo archivo ${filePath}:`, error.message);
    return [];
  }
}

function buscarTodosLosEmojis(dir) {
  const resultados = [];

  try {
    const entries = fs.readdirSync(dir, { withFileTypes: true });

    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name);

      if (entry.isDirectory()) {
        resultados.push(...buscarTodosLosEmojis(fullPath));
      } else if (entry.name.endsWith('.jsx') || entry.name.endsWith('.js')) {
        const emojis = buscarEmojisEnArchivo(fullPath);
        if (emojis.length > 0) {
          resultados.push({
            archivo: path.relative(CLIENT_SRC, fullPath),
            emojis,
          });
        }
      }
    }
  } catch (error) {
    console.error(`‚ùå Error escaneando directorio ${dir}:`, error.message);
  }

  return resultados;
}

function verificarArchivosModificados() {
  console.log('üîç VERIFICANDO ARCHIVOS MODIFICADOS...\n');

  let cambiosCompletados = 0;

  ARCHIVOS_MODIFICADOS.forEach((archivo) => {
    const fullPath = path.join(CLIENT_SRC, archivo);

    if (fs.existsSync(fullPath)) {
      const emojis = buscarEmojisEnArchivo(fullPath);

      if (emojis.length === 0) {
        console.log(`‚úÖ ${archivo} - Sin emojis en UI`);
        cambiosCompletados++;
      } else {
        console.log(`‚ö†Ô∏è  ${archivo} - Emojis restantes:`);
        emojis.forEach((item) => {
          console.log(`   L√≠nea ${item.linea}: ${item.contenido}`);
        });
      }
    } else {
      console.log(`‚ùì ${archivo} - Archivo no encontrado`);
    }
  });

  console.log(
    `\nüìä RESUMEN: ${cambiosCompletados}/${ARCHIVOS_MODIFICADOS.length} archivos completados`
  );
  return cambiosCompletados === ARCHIVOS_MODIFICADOS.length;
}

function mostrarMapeoImplementado() {
  console.log('\nüé® MAPEO EMOJI ‚Üí ICONO IMPLEMENTADO:\n');

  Object.entries(MAPEO_REALIZADO).forEach(([emoji, icono]) => {
    console.log(`${emoji} ‚Üí <${icono}>`);
  });

  console.log(`\n‚ú® Total: ${Object.keys(MAPEO_REALIZADO).length} emojis reemplazados`);
}

function main() {
  console.log('üßπ VERIFICACI√ìN: ELIMINACI√ìN DE EMOJIS EN TAGS DE LISTADO');
  console.log('='.repeat(60));

  // Verificar archivos modificados espec√≠ficamente
  const todosCompletados = verificarArchivosModificados();

  // Mostrar mapeo implementado
  mostrarMapeoImplementado();

  // Buscar emojis restantes en toda la aplicaci√≥n
  console.log('\nüîé ESCANEANDO APLICACI√ìN COMPLETA...\n');
  const resultados = buscarTodosLosEmojis(CLIENT_SRC);

  if (resultados.length === 0) {
    console.log('‚úÖ No se encontraron emojis de UI en la aplicaci√≥n');
  } else {
    console.log('‚ö†Ô∏è  EMOJIS RESTANTES EN UI:');
    resultados.forEach((resultado) => {
      console.log(`\nüìÅ ${resultado.archivo}:`);
      resultado.emojis.forEach((item) => {
        console.log(`   L√≠nea ${item.linea}: ${item.contenido}`);
      });
    });
  }

  console.log('\n' + '='.repeat(60));

  if (todosCompletados && resultados.length === 0) {
    console.log('‚úÖ TODAS LAS TAREAS COMPLETADAS EXITOSAMENTE');
    console.log('‚úÖ Todos los emojis en tags de listado han sido reemplazados');
    console.log('‚úÖ La aplicaci√≥n ahora usa iconos consistentes de Lucide React');
  } else {
    console.log('‚ö†Ô∏è  HAY TRABAJO PENDIENTE');
    console.log(`   - Archivos modificados: ${todosCompletados ? 'Completado' : 'Pendiente'}`);
    console.log(
      `   - Emojis restantes: ${resultados.length === 0 ? 'Ninguno' : resultados.length + ' archivos'}`
    );
  }
}

if (require.main === module) {
  main();
}

module.exports = {
  buscarEmojisEnArchivo,
  buscarTodosLosEmojis,
  EMOJIS_A_VERIFICAR,
  MAPEO_REALIZADO,
};
